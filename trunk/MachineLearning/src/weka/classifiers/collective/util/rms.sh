#!/bin/bash
#
# transforms the RMS/Accuracy files into gnuplot data/script files
#
# FracPete

# the usage of this script
function usage()
{
   echo 
   echo "usage: ${0##*/} -i <dir> -o <dir> -D <database> [-h]"
   echo "       [-H <host>] [-u <user>] [-p <password>] [-I] [-e] [-F <format>]"
   echo
   echo "Generates Gnuplots from RMS/Acc files generated by SimpleCollective"
   echo "or TwoStageCollective"
   echo 
   echo " -h   this help"
   echo " -i   <dir>"
   echo "      the directory containing the CSV files"
   echo "      current: $INPUT"
   echo " -o   <dir>"
   echo "      the output directory for the plot files etc."
   echo "      current: $OUTPUT"
   echo " -H   <host>"
   echo "      the DB host to connect to"
   echo "      current: $DBHOST"
   echo " -P   <port>"
   echo "      the port MySQL is listening on"
   echo "      current: $DBPORT"
   echo " -u   <user>"
   echo "      the DB user to connect as"
   echo "      current: $DBUSER"
   echo " -p   <password>"
   echo "      the password to use for authentication"
   echo "      current: $DBPW"
   echo " -D   <database>"
   echo "      the database to connect to"
   echo " -e   execute the gnuplot scripts"
   echo " -I   whether the classifiers were run with '-insight' option and"
   echo "      we therefore don't need to get the real RMS on the test set"
   echo "      from the database"
   echo " -F   <format>"
   echo "      determines the curves to be plotted (blank separated list)"
   echo "      1=RMS, 2=RMS-Test, 3=RMS-Train, 4=RMS-Real, 5=Acc-Test, 6=Acc-Train,"
   echo "      7=FlippedLabels"
   echo "      current: '$FORMAT'"
   echo 
}

# transposes the file IN into OUT
function transpose()
{
   cat $IN | sed s/","/" "/g | exec awk '
     NR == 1 {
         n = NF
            for (i = 1; i <= NF; i++)
                  row[i] = $i
                     next
     }
   {
      if (NF > n)
            n = NF
               for (i = 1; i <= NF; i++)
                     row[i] = row[i] " " $i
   }
   END {
      for (i = 1; i <= n; i++)
            print row[i]
   }' ${1+"$@"} > $OUT
}

# return line LINE from file TMP in TMP
function getline()
{
   TMP=`cat $TMP | grep -v "+\|root" | sed s/"[\ \|]*"//g | head -n $LINE | tail -n 1`
}

# adds the line in TMP to the file GNUPLOT, it checks whether FIRST_PLOT is
# set to "yes" or "no" and adds either a "plot" or "replot"
function add_plot()
{
   if [ "$FIRST_PLOT" = "yes" ]
   then
      echo "plot $TMP" >> $GNUPLOT
      FIRST_PLOT="no"
   else
      echo "replot $TMP" >> $GNUPLOT
   fi
}

# variables
INPUT="."
OUTPUT="."
DBHOST="localhost"
DBPORT="3306"
DBUSER="nobody"
DBPW=""
DATABASE=""
EXECUTE="no"
INSIGHT="no"
FORMAT="1 2 3 4 5 6"

# interprete parameters
while getopts ":hi:o:H:P:u:p:D:eIF:" flag
do
   case $flag in
      i) INPUT=$OPTARG
         ;;
      o) OUTPUT=$OPTARG
         ;;
      H) DBHOST=$OPTARG
         ;;
      P) DBPORT=$OPTARG
         ;;
      u) DBUSER=$OPTARG
         ;;
      p) DBPW=$OPTARG
         ;;
      D) DATABASE=$OPTARG
         ;;
      F) FORMAT=$OPTARG
         ;;
      e) EXECUTE="yes"
         ;;
      I) INSIGHT="yes"
         ;;
      h) usage
         exit 0
         ;;
      *) usage
         exit 1
         ;;
   esac
done

# everything provided?
if [ "$INPUT" = "" ] || [ "$OUTPUT" = "" ]
then
   echo
   echo "ERROR: not all parameters provided!"
   echo
   usage
   exit 2
fi
if [ "$INSIGHT" = "no" ]
then
   if [ "$DBHOST" = "" ] || [ "$DATABASE" = "" ]
   then
     echo
     echo "ERROR: not all parameters provided!"
     echo
     usage
     exit 2
   fi
fi

# do directories exist?
if [ ! -d "$INPUT" ]
then
  echo
  echo "ERROR: directory '$INPUT' doesn't exist!"
  echo
  exit 3
fi
if [ ! -d "$OUTPUT" ]
then
  echo
  echo "ERROR: directory '$OUTPUT' doesn't exist!"
  echo
  exit 3
fi

# determine the plots
PLOT_RMS="no"
PLOT_RMSTest="no"
PLOT_RMSTrain="no"
PLOT_RMSReal="no"
PLOT_ACCTest="no"
PLOT_ACCTrain="no"
PLOT_FlippedLabels="no"
HAS_PLOT="no"
for i in $FORMAT
do
   if [ "$i" = "1" ]
   then
      PLOT_RMS="yes"
      HAS_PLOT="yes"
   elif [ "$i" = "2" ]
   then
      PLOT_RMSTest="yes"
      HAS_PLOT="yes"
   elif [ "$i" = "3" ]
   then
      PLOT_RMSTrain="yes"
      HAS_PLOT="yes"
   elif [ "$i" = "4" ]
   then
      PLOT_RMSReal="yes"
      HAS_PLOT="yes"
   elif [ "$i" = "5" ]
   then
      PLOT_ACCTest="yes"
      HAS_PLOT="yes"
   elif [ "$i" = "6" ]
   then
      PLOT_ACCTrain="yes"
      HAS_PLOT="yes"
   elif [ "$i" = "7" ]
   then
      PLOT_FlippedLabels="yes"
      HAS_PLOT="yes"
   fi
done
# at least one plot has to be provided!
if [ "$HAS_PLOT" = "no" ]
then
   echo
   echo "ERROR: at least one plot has to be specified!"
   echo
   usage
   exit 4
fi

# process
echo
echo "Processing '$INPUT'"
for CSV in $INPUT/*-rms.csv
do
   # determine prefix
   NAME=`echo $CSV | sed s/"-rms\\.csv"//g | sed s/".*\/"//g`
   echo "- $NAME"

   # transpose files
   IN="$INPUT/$NAME-rms.csv";OUT="$OUTPUT/$NAME-rms.t";transpose
   IN="$INPUT/$NAME-rms_test.csv";OUT="$OUTPUT/$NAME-rms_test.t";transpose
   IN="$INPUT/$NAME-rms_train.csv";OUT="$OUTPUT/$NAME-rms_train.t";transpose
   if [ "$INSIGHT" = "no" ]
   then
      SCHEME=`echo $NAME | sed s/"-.*"//g`
      DATASET=`echo $NAME | sed s/"^[^\-]*-"//g | sed s/"-R.*"//g`
      EVAL=`echo $NAME | sed s/".*-E"//g | sed s/"-.*"//g`
      COMP=`echo $NAME | sed s/".*-C"//g | sed s/"-.*"//g`
      SQL="SELECT root_mean_squared_error FROM results0 where key_scheme='$SCHEME' and key_dataset like '$DATASET-%' and key_scheme_options like '%-eval $EVAL%' and key_scheme_options like '%-compare $COMP%' order by key_run asc"
      mysql --host=$DBHOST --port=$DBPORT --user=$DBUSER --password=$DBPW --database="$DATABASE" --execute="$SQL" > "$OUTPUT/$NAME-rms_real"
   else
      IN="$INPUT/$NAME-rms_test-original.csv";OUT="$OUTPUT/$NAME-rms_test-original.t";transpose
   fi
   IN="$INPUT/$NAME-acc_test-original.csv";OUT="$OUTPUT/$NAME-acc_test-original.t";transpose
   IN="$INPUT/$NAME-acc_train.csv";OUT="$OUTPUT/$NAME-acc_train.t";transpose
   IN="$INPUT/$NAME-flipped.csv";OUT="$OUTPUT/$NAME-flipped.t";transpose

   # determine columns
   COLUMNS=`head -n1 "$OUTPUT/$NAME-rms.t" | wc -w | sed s/" "*//g`

   for ((COL = 1; COL <= $COLUMNS; COL++))
   do
      FILENAME="$NAME-Run_$COL.dat"
      FILE="$OUTPUT/$FILENAME"
   
      # delete existing file
      if [ $COL -eq 1 ]
      then
         rm -f $FILE
      fi

      # x-axis
      cut -f1 -d" " "$OUTPUT/$NAME-rms.t" | grep -n "." | sed s/":.*"//g > "$FILE-0"

      # rms
      cut -f$COL -d " " "$OUTPUT/$NAME-rms.t" > "$FILE-1"

      # rms test
      cut -f$COL -d " " "$OUTPUT/$NAME-rms_test.t" > "$FILE-2"
      
      # rms train
      cut -f$COL -d " " "$OUTPUT/$NAME-rms_train.t" > "$FILE-3"
      
      # real RMS
      if [ "$INSIGHT" = "no" ]
      then
         LINE=$COL;TMP="$OUTPUT/$NAME-rms_real";getline
         cut -f1 -d" " "$OUTPUT/$NAME-rms.t" | sed s/".*"/$TMP/g > "$FILE-4"
      else
         cut -f$COL -d " " "$OUTPUT/$NAME-rms_test-original.t" > "$FILE-4"
      fi
      
      # acc test
      cut -f$COL -d " " "$OUTPUT/$NAME-acc_test-original.t" > "$FILE-5"
      
      # acc train
      cut -f$COL -d " " "$OUTPUT/$NAME-acc_train.t" > "$FILE-6"
      
      # flipped labels
      cut -f$COL -d " " "$OUTPUT/$NAME-flipped.t" > "$FILE-7"

      # paste together
      paste "$FILE-0" "$FILE-1" "$FILE-2" "$FILE-3" "$FILE-4" "$FILE-5" "$FILE-6" "$FILE-7" > $FILE
      
      # clean up
      rm -f $FILE-*

      # gnuplot file
      GNUPLOT="$OUTPUT/$NAME-Run_$COL.gnuplot"
      rm -f $GNUPLOT
      FIRST_PLOT="yes"
      if [ "$PLOT_RMS" = "yes" ]
      then
         TMP="'$FILENAME' using 1:2 with lines title 'RMS'"
         add_plot
      fi
      if [ "$PLOT_RMSTest" = "yes" ]
      then
         TMP="'$FILENAME' using 1:3 with lines title 'RMS-Test'"
         add_plot
      fi
      if [ "$PLOT_RMSTrain" = "yes" ]
      then
         TMP="'$FILENAME' using 1:4 with lines title 'RMS-Train'"
         add_plot
      fi
      if [ "$PLOT_RMSReal" = "yes" ]
      then
         TMP="'$FILENAME' using 1:5 with lines title 'RMS-Real'"
         add_plot
      fi
      if [ "$PLOT_ACCTest" = "yes" ]
      then
         TMP="'$FILENAME' using 1:6 with lines title 'Acc-Test'"
         add_plot
      fi
      if [ "$PLOT_ACCTrain" = "yes" ]
      then
         TMP="'$FILENAME' using 1:7 with lines title 'Acc-Train'"
         add_plot
      fi
      if [ "$PLOT_FlippedLabels" = "yes" ]
      then
         TMP="'$FILENAME' using 1:8 with lines title 'Flipped Labels'"
         add_plot
      fi
      echo "set terminal png 800 600" >> $GNUPLOT
      echo "set output '`echo $FILENAME | sed s/"\.dat$"/".png"/g`'" >> $GNUPLOT
      echo "replot" >> $GNUPLOT
   done
    
   # clean up
   rm -f $OUTPUT/$NAME-*.t
done

# execute the scripts?
if [ "$EXECUTE" = "yes" ]
then
  echo
  echo -n "Generating plots"
  for SCRIPT in $OUTPUT/*.gnuplot
  do
    echo -n "."
    gnuplot $SCRIPT
  done
  echo
fi

